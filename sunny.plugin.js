// Generated by CoffeeScript 1.3.3
(function() {
  var doUpload, handle, handleEnv, handleEnvPrefix, http, mime, sunny, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  sunny = require('sunny');

  mime = require('mime');

  http = require('http');

  util = require('util');

  doUpload = function(docpad, container, acl) {
    var cloudHeaders;
    if (acl != null) {
      if (acl === !false) {
        cloudHeaders = {
          "acl": acl
        };
      } else {
        cloudHeaders = {};
      }
    } else {
      cloudHeaders = {
        "acl": 'public-read'
      };
    }
    return docpad.getFiles({
      write: true
    }).forEach(function(file) {
      var data, header, headers, length, path, type, writeStream, _i, _len, _ref;
      path = file.attributes.relativeOutPath;
      data = file.get('contentRendered') || file.get('content') || file.getData();
      length = data.length;
      type = mime.lookup(path);
      headers = {
        "Content-Length": length,
        "Content-Type": type
      };
      if (file.get('headers')) {
        _ref = file.get('headers');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          header = _ref[_i];
          headers[header.name] = header.value;
        }
      }
      writeStream = container.putBlob(path, {
        headers: headers,
        cloudHeaders: cloudHeaders
      });
      writeStream.on('error', function(err) {
        return console.log("Error uploading " + path);
      });
      writeStream.on('end', function(results, meta) {
        return console.log("Uploaded " + path + " to " + container.name);
      });
      writeStream.write(data);
      return writeStream.end();
    });
  };

  handle = function(docpad, sunnyConfig, sunnyContainer, defaultACL) {
    var connection, containerReq;
    if ((sunnyConfig.provider != null) && (sunnyConfig.account != null) && (sunnyConfig.secretKey != null) && (sunnyContainer != null)) {
      connection = sunny.Configuration.fromObj(sunnyConfig).connection;
      containerReq = connection.getContainer(sunnyContainer, {
        validate: true
      });
      containerReq.on('error', function(err) {
        return console.log("Received error trying to connect to provider: \n " + err);
      });
      containerReq.on('end', function(results, meta) {
        var container;
        container = results.container;
        console.log("Got container " + container.name + ".");
        return doUpload(docpad, container, defaultACL);
      });
      return containerReq.end();
    } else {
      console.log('One of the config variables is missing. Printing config:');
      console.dir(sunnyConfig);
      return console.log("Container is " + sunnyContainer);
    }
  };

  handleEnvPrefix = function(docpad, prefix) {
    var sunnyACL, sunnyConfig, sunnyContainer;
    sunnyConfig = {
      provider: process.env["" + prefix + "PROVIDER"],
      account: process.env["" + prefix + "ACCOUNT"],
      secretKey: process.env["" + prefix + "SECRETKEY"],
      ssl: process.env["" + prefix + "SSL"]
    };
    sunnyContainer = process.env["" + prefix + "CONTAINER"];
    sunnyACL = process.env["" + prefix + "ACL"];
    sunnyConfig.ssl = (typeof sunnyConfig.ssl === 'string') && (sunnyConfig.ssl.toLowerCase() === 'true');
    return handle(docpad, sunnyConfig, sunnyContainer, sunnyACL);
  };

  handleEnv = function(docpad, config) {
    var prefix, _i, _len, _ref, _results;
    if (config.envPrefixes.length > 0) {
      _ref = config.envPrefixes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        _results.push(handleEnvPrefix(docpad, prefix));
      }
      return _results;
    } else {
      return handleEnvPrefix(docpad, "DOCPAD_SUNNY_");
    }
  };

  module.exports = function(BasePlugin) {
    var docpadSunyPlugin;
    return docpadSunyPlugin = (function(_super) {

      __extends(docpadSunyPlugin, _super);

      function docpadSunyPlugin() {
        return docpadSunyPlugin.__super__.constructor.apply(this, arguments);
      }

      docpadSunyPlugin.prototype.name = "sunny";

      docpadSunyPlugin.prototype.config = {
        defaultACL: 'public-read',
        configFromEnv: false,
        envPrefixes: [],
        cloudConfigs: [
          {
            sunny: {
              provider: void 0,
              account: void 0,
              secretKey: void 0,
              ssl: void 0
            },
            container: void 0,
            acl: void 0
          }
        ]
      };

      docpadSunyPlugin.prototype.writeAfter = function(collection) {
        var cloudConfig, _i, _len, _ref, _results;
        console.log(util.inspect(this.config, true, 5));
        if (this.config.configFromEnv) {
          handleEnv(this.docpad, this.config);
          console.log('Grabbing config from environment.');
        }
        if (this.config.cloudConfigs.length > 0) {
          _ref = this.config.cloudConfigs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            cloudConfig = _ref[_i];
            _results.push(handle(this.docpad, cloudConfig.sunny, cloudConfig.container, cloudConfig.acl));
          }
          return _results;
        }
      };

      return docpadSunyPlugin;

    })(BasePlugin);
  };

}).call(this);
