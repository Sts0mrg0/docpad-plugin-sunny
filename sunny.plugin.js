// Generated by CoffeeScript 1.3.3
(function() {
  var doUpload, http, mime, sunny,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  sunny = require('sunny');

  mime = require('mime');

  http = require('http');

  doUpload = function(docpad, container) {
    var cloudHeaders;
    cloudHeaders = {
      "acl": 'public-read'
    };
    return docpad.getFiles({
      write: true
    }).forEach(function(file) {
      var data, header, headers, length, path, type, writeStream, _i, _len, _ref;
      path = file.attributes.relativeOutPath;
      data = file.get('contentRendered') || file.get('content') || file.getData();
      length = data.length;
      type = mime.lookup(path);
      headers = {
        "Content-Length": length,
        "Content-Type": type
      };
      if (file.get('headers')) {
        _ref = file.get('headers');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          header = _ref[_i];
          headers[header.name] = header.value;
        }
      }
      writeStream = container.putBlob(path, {
        headers: headers,
        cloudHeaders: cloudHeaders
      });
      writeStream.on('error', function(err) {
        return console.log("Error uploading " + path);
      });
      writeStream.on('end', function(results, meta) {
        return console.log("Uploaded " + path);
      });
      writeStream.write(data);
      return writeStream.end();
    });
  };

  module.exports = function(BasePlugin) {
    var docpadSunyPlugin;
    return docpadSunyPlugin = (function(_super) {

      __extends(docpadSunyPlugin, _super);

      function docpadSunyPlugin() {
        return docpadSunyPlugin.__super__.constructor.apply(this, arguments);
      }

      docpadSunyPlugin.prototype.name = "sunny";

      docpadSunyPlugin.prototype.writeAfter = function(collection) {
        var connection, containerReq, docpad, sunnyConfig, sunnyContainer;
        sunnyConfig = {
          provider: process.env.DOCPAD_SUNNY_PROVIDER,
          account: process.env.DOCPAD_SUNNY_ACCOUNT,
          secretKey: process.env.DOCPAD_SUNNY_SECRETKEY,
          ssl: process.env.DOCPAD_SUNNY_SSL
        };
        sunnyContainer = process.env.DOCPAD_SUNNY_CONTAINER;
        sunnyConfig.ssl = (typeof sunnyConfig.ssl === 'string') && (sunnyConfig.ssl.toLowerCase() === 'true');
        if ((sunnyConfig.provider != null) && (sunnyConfig.account != null) && (sunnyConfig.secretKey != null) && (sunnyContainer != null)) {
          docpad = this.docpad;
          connection = sunny.Configuration.fromObj(sunnyConfig).connection;
          containerReq = connection.getContainer(sunnyContainer, {
            validate: true
          });
          containerReq.on('error', function(err) {
            return console.log("Received error trying to connect to provider: \n " + err);
          });
          containerReq.on('end', function(results, meta) {
            var container;
            container = results.container;
            console.log("Got container " + container.name + ".");
            return doUpload(docpad, container);
          });
          return containerReq.end();
        } else {
          console.log('One of the config variables is missing. Printing config:');
          console.dir(sunnyConfig);
          return console.log("Container is " + sunnyContainer);
        }
      };

      return docpadSunyPlugin;

    })(BasePlugin);
  };

}).call(this);
